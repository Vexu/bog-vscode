{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "bog",
  "scopeName": "source.bog",
  "fileTypes": [
    "bog"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "\\b(as|is)\\s+(none|int|num|bool|str|tuple|map|list|error|range|fn|tagged)\\b",
          "captures": {
            "1": {
              "name": "keyword.type.bog"
            },
            "2": {
              "name": "entity.name.type.bog"
            }
          }
        },
        {
          "match": "\\b(as|is)\\s+([_$[:alpha:]][_$[:alnum:]]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.type.bog"
            },
            "2": {
              "name": "invalid.illegal.type.bog"
            }
          }
        },
        {
          "name": "keyword.declaration.bog",
          "match": "\\b(let|mut)\\b"
        },
        {
          "name": "keyword.control.flow.bog",
          "match": "\\b(break|return|continue)\\b"
        },
        {
          "name": "keyword.control.async.bog",
          "match": "\\b(await|resume|suspend|async)\\b"
        },
        {
          "name": "keyword.control.trycatch.bog",
          "match": "\\b(try|catch)\\b"
        },
        {
          "name": "keyword.control.conditional.bog",
          "match": "\\b(if|else|match)\\b"
        },
        {
          "name": "keyword.control.repeat.bog",
          "match": "\\b(while|for)\\b"
        },
        {
          "name": "keyword.control.builtin.bog",
          "match": "\\b(import)\\b"
        },
        {
          "name": "keyword.constant.bool.bog",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.constant.null.bog",
          "match": "\\bnull\\b"
        },
        {
          "name": "keyword.default.bog",
          "match": "\\b(fn|error|as|is|and|or|in|not)\\b"
        },
        {
          "name": "variable.language.this.bog",
          "match": "\\bthis\\b"
        },
        {
          "name": "variable.other.enummember.zig",
          "match": "@[0-9]*[_$[:alpha:]][_$[:alnum:]]*\\b"
        },
        {
          "name": "entity.name.function.bog",
          "match": "[0-9]*[_$[:alpha:]][_$[:alnum:]]*(?=\\s*(=|:)\\s*\\bfn\\b)"
        },
        {
          "name": "entity.name.function.call.bog",
          "match": "[0-9]*[_$[:alpha:]][_$[:alnum:]]*(?=\\s*\\()"
        },
        {
          "name": "variable.bog",
          "match": "[0-9]*[_$[:alpha:]][_$[:alnum:]]*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.bog",
          "match": "(\\b(and|or|not|in)\\b)|(==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.bog",
          "match": "(-|\\+|\\*\\*?|/|%)=?"
        },
        {
          "name": "keyword.operator.bitwise.bog",
          "match": "(<<|>>|!|&|\\^|\\|)=?"
        },
        {
          "name": "keyword.operator.assign.bog",
          "match": "="
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.bog",
          "begin": "#",
          "end": "$",
          "patterns": [
            {
              "match": "\\b(TODO|NOTE|FIXME|XXX)\\b",
              "name": "keyword.todo.bog"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "(f)(\"[^\\{\"]*\\{)",
          "end": "(\\}[^\"\\{]*\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.format-string.bog"
            },
            "2": {
              "name": "string.quoted.double.format.bog"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.format.bog"
            }
          },
          "patterns": [
            {
              "include": "#formatstring"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            }
          ]
        },
        {
          "begin": "(f)('[^\\{']*\\{)",
          "end": "(\\}[^'\\{]*')",
          "beginCaptures": {
            "1": {
              "name": "keyword.format-string.bog"
            },
            "2": {
              "name": "string.quoted.single.format.bog"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string.quoted.single.format.bog"
            }
          },
          "patterns": [
            {
              "include": "#formatstring"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            }
          ]
        },
        {
          "name": "string.quoted.double.bog",
          "begin": "(f)?\"",
          "end": "\"",
          "beginCaptures": {
            "1": {
              "name": "keyword.format-string.bog"
            }
          },
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        },
        {
          "name": "string.quoted.single.bog",
          "begin": "(f)?'",
          "end": "'",
          "beginCaptures": {
            "1": {
              "name": "keyword.format-string.bog"
            }
          },
          "patterns": [
            {
              "include": "#stringcontent"
            }
          ]
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "name": "constant.character.escape.bog",
          "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.bog",
          "match": "\\\\."
        }
      ]
    },
    "formatstring": {
      "patterns": [
        {
          "name": "string.format.bog",
          "begin": "\\}",
          "end": "\\{",
          "patterns": [
            {
              "include": "#stringcontents"
            },
            {
              "name": "constant.character.escape.bog",
              "match": "({{|}})"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.bog",
          "match": "\\b[1-9][0-9_]*([\\.,][0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.float.bog",
          "match": "\\b[0-9][\\.,][0-9][0-9_]*([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "invalid.illegal.float.bog",
          "match": "\\b0[0-9_]+([\\.,][0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.bog",
          "match": "\\b[1-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.decimal.bog",
          "match": "\\b0\\b"
        },
        {
          "name": "invalid.illegal.octal.bog",
          "match": "\\b[0-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.bog",
          "match": "\\b0x[a-fA-F0-9_]+\\b"
        },
        {
          "name": "constant.numeric.octal.bog",
          "match": "\\b0o[0-7_]+\\b"
        },
        {
          "name": "constant.numeric.binary.bog",
          "match": "\\b0b[01_]+\\b"
        }
      ]
    }
  }
}